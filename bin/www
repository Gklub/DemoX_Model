#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jiqi:server');
var http = require('http');
var gb = require('../routes/global');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Create socket.io
 */

var io = require('socket.io')(server);

io.on('connection', function(socket){
  console.log('user connect');

  socket.on('disconnect', function(){
    console.log('user disconnect');
  });

  setInterval(function () {

    socket.emit('time', {
    	gameID: gb.gameID,
    	countDown: gb.countDown.toFixed(2)
    })
  }, 500)
  //
  // setTimeout(function () {
  //   socket.send({
  //     type:'game control',
  //     status:'begin'
  //   })
  // }, 1000);

  socket.on('message', function (msg) {
    if (msg.type == 'game control') {
      if (msg.status == 'begin') {
        gb.members.forEach(function (m) {m.ready = false})
        gb.DEBUG_MODE && console.log('game begins!');
        gb.gameState = 0
        gb.members = []
        gb.gameID = gb.randomIDCreator(12)
        gb.countDown = gb.countDownInit
        gb.countDowner(function(){
          gb.damageCalculator()
          socket.emit('members', gb.members)
          gb.DEBUG_MODE && console.log(gb.members);
          gb.members.forEach(function (m) {m.ready = false})
          gb.countDown = 0
        })

        // setTimeout(function () {
        //   socket.emit('members', gb.members)
        // }, 40000);

        var id = setInterval(function () {

          // game end
          var arr = gb.members.filter(function (m) {
            return !m.isDead
          })
          if(arr.length <= 1 && gb.gameState > 0) {
            socket.send({
              type: 'game control',
              status: 'end'
            })
            clearInterval(id)
          }

          gb.countDown = gb.countDownInit
          gb.countDowner(function(){
            gb.gameState++
            gb.damageCalculator()
            gb.members.forEach(function (m) {m.ready = false})
            gb.countDown = 0
            socket.emit('members', gb.members)
            gb.DEBUG_MODE && console.log(gb.members);
          })

        }, 15000);
      }
    }
  });


});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
